;; Core Character Minting System
(define-constant CONTRACT_OWNER tx-sender)
(define-constant MINT_PRICE u100000)
(define-constant MAX_CHARACTERS_PER_USER u100)

(define-data-var last-character-id uint u0)
(define-map characters uint { owner: principal, name: (string-ascii 24), level: uint, xp: uint, attack: uint, defense: uint, last-battle-block: uint })
(define-map user-character-count principal uint)

(define-public (mint-character (name (string-ascii 24)))
    (let ((new-id (+ (var-get last-character-id) u1))
          (caller tx-sender)
          (current-count (default-to u0 (map-get? user-character-count caller))))
        (asserts! (< current-count MAX_CHARACTERS_PER_USER) (err u400))
        (try! (stx-transfer? MINT_PRICE caller CONTRACT_OWNER))
        (map-set characters new-id { owner: caller, name: name, level: u1, xp: u0, attack: (+ (mod (len (sha256 block-height)) u10) u1), defense: (+ (mod (len (sha256 (+ block-height u1))) u10) u1), last-battle-block: u0 })
        (map-set user-character-count caller (+ current-count u1))
        (var-set last-character-id new-id)
        (ok new-id)
    )
)
;; Character Trading System
(define-constant MIN_PRICE u1000)

(define-map market uint { price: uint, seller: principal })

(define-public (list-for-sale (character-id uint) (price uint))
    (begin
        (asserts! (>= price MIN_PRICE) (err u400))
        (let ((owner (unwrap! (map-get? characters character-id) (err u404))))
            (asserts! (is-eq tx-sender (get owner owner)) (err u401))
            (map-set market character-id { price: price, seller: tx-sender })
            (ok true)
        )
    )
)

(define-public (buy-character (character-id uint))
    (begin
        (let ((listing (unwrap! (map-get? market character-id) (err u404)))
              (buyer-count (default-to u0 (map-get? user-character-count tx-sender))))
            (asserts! (< buyer-count MAX_CHARACTERS_PER_USER) (err u400))
            (try! (stx-transfer? (get price listing) tx-sender (get seller listing)))
            (map-delete market character-id)
            (let ((character (unwrap! (map-get? characters character-id) (err u404))))
                (map-set characters character-id (merge character { owner: tx-sender }))
                (map-set user-character-count (get seller listing) (- (default-to u0 (map-get? user-character-count (get seller listing))) u1))
                (map-set user-character-count tx-sender (+ buyer-count u1))
                (ok true)
            )
        )
    )
)
